@font-face {
  font-family: Montserrat;
  src: url(./fonts/Montserrat-Regular.ttf) format("truetype");
}

@font-face {
  font-family: Montserrat;
  src: url(./fonts/Montserrat-Bold.ttf) format("truetype");
  font-weight: bold;
}

@font-face {
  font-family: Roboto;
  src: url(./fonts/Roboto-Regular.ttf) format("truetype");
}

@font-face {
  font-family: Roboto;
  src: url(./fonts/Roboto-Bold.ttf) format("truetype");
  font-weight: 700;
}

body {
  margin: 0;
  font-family: "Montserrat", sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  height: 100%;
}

/* Another usefull font props:

font-variant: small-caps; capitalize
letter-spacing: 10px; for letter spacing
line-height: 2; line height, calculated based on the font size , in this case font size x2 
text-decoration: underline, overline, line-through (doted, wavy, colors)
text-shadow: 2px 2px 7px gray; (x,y,blur, color)

  font: italic 700 1.2rem/2 "Roboto", sans-serif; (font-style font-variant font-weight font-size/line-height font-family )
 

  font display:


*/

/* 
Flex box:
display: flex
flex-direction: (row | row-reverse | column | column-reverse )
flex-wrap: (nowrap = default, wrap)

flex-flow : (short-hand ) flex-direction flex-wrap
flex-grow specifies how much of the flex
 container's positive free space, if any, should be assigned to the flex item's

flex-shrink
/ props

child
  align-self - Align the children

 Positional alignment 
justify-content: center;
justify-content: start;
justify-content: end;
justify-content: flex-start;
justify-content: flex-end;
justify-content: left;
justify-content: right;

justify-content: main

examples of props
justify-content: space-between;
justify-content: space-around;
justify-content: space-evenly;
justify-content: stretch;

align-items: cross 

exampe of props
align-items: baseline;
align-items: first baseline;
align-items: last baseline;  Overflow alignment (for positional alignment only) 
align-items: safe center;
align-items: unsafe center;


align-content: ;




flex grow
flex shrink
*/

/* 


grid

initialize:
display: grid;
grid-template-columns: (example repeat(4, 25%))
grid-template-rows: (example 5rem minmax(10px, 200px))

grid-auto-flow

  grid-auto-rows
  grid-auto-colun


childs
  justify-self: 
  align-self
  
//
span : span colums or rows
  column-span
  row-span

columns and rows can overlap
  z-index works

the container
  justify-items: (center,start,end, stretch(default))// position the elements in the grid areas, horizontal
  align-items: (center,start,end, stretch(default)) // position the elements in the grid areas, vertical
  justify-content
  align-content 

example:
.container {
    margin: 20px;
    display: grid;
    grid-template-columns: repeat(2, 15rem); can be auto-fill or auto-fit // 
    justify-content: center;
    grid-gap: 1.5rem;
    grid-auto-rows: minmax(8rem, auto);
    grid-auto-flow: row (dense = fill in holes earlier in the grid, if smaller items come up later);
    grid-auto-columns: 5rem;
}
    
  grid-column-start: 3; 
  grid-column-end: span 2;

  short-hand : grid-column: start / end, and is the same for the grid-row

  grid-row-start: 1;
  grid-row-end: span 2;

  short-hand grid-area: row-start / column-start / row-end / column-end

  grid-colum-end : -1 / all the grid



  gap: row-gap column-gap


    grid-template-areas:
    "header header header header"
    "side main main main"
    "footer footer footer footer";





*/

/* transform and rotate:

  transform:

    rotateZ,X and Y:

      transform: rotateZ(45deg) // rotate the elemente 45 deg clockwise direction, default origin =  center

    transform-origin: (X) (Y)  // change the origin of the transformation
    
    translate:
      transform: translateX(1rem) translateY(1rem) // translate the elemente through the X and Y
      short-hand: translate : (x,y) 
    scale: 
      scale the container (x,y), if you put just one, then both, unit = deg
    skew:
      skew the image (x,y), if you put just one, then both unit = deg



transition: (type of transition ex= opacity time of transition ex=0.3s type of transition ex fast and then slow = ease-out), transform 500ms ease-out;
  can add a duration before start ex = transition: opacity 200ms 1s ease-out;


animations:

  animation: NAME DURATION DELAY TIMING-FUNCTION ITERATION DIRECTION FILL-MODE PLAY-STATE; 

  Example:
    animation: wiggle 200ms 1s ease-out 8 alternate forwards running;

    @keyframes wiggle {
     from {
        transform: rotateZ(0);
      }
    to {
      transform: rotateZ(10deg);
    }
}
useful prop:
  overflow: hidden

 */
